<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>ÜBER</value>
  </data>
  <data name="AscendingOrder" xml:space="preserve">
    <value>Aufsteigende Reihenfolge</value>
  </data>
  <data name="DescendingOrder" xml:space="preserve">
    <value>Absteigende Reihenfolge</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Erledigt!</value>
  </data>
  <data name="DropMessage" xml:space="preserve">
    <value>Ordner auswählen oder hier ablegen</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Upps ein Fehler! :(</value>
  </data>
  <data name="Files" xml:space="preserve">
    <value>Dateien:</value>
  </data>
  <data name="Folder" xml:space="preserve">
    <value>Ordner</value>
  </data>
  <data name="Folders" xml:space="preserve">
    <value>Ordner:</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>INFO</value>
  </data>
  <data name="MessageDirectoryNotFound" xml:space="preserve">
    <value>Ordner:
'{dir}'
nicht gefunden!

Bitte einen vorhandenen Ordner auswählen!</value>
  </data>
  <data name="MessageFinal" xml:space="preserve">
    <value>Erfolgreich abgeschlossen.

Genieße deine ordentlich sortierte Musik. ;)</value>
  </data>
  <data name="MessageLocalDrive" xml:space="preserve">
    <value>Lokales Laufwerk erkannt!
Bitte die Applikation nur auf externe Laufwerke anwenden (USB, etc.).

Willst Du wirklich auf eigene Gefahr weitermachen?</value>
  </data>
  <data name="MessageProcessing" xml:space="preserve">
    <value>Verarbeite Ordner {foldersCount} &gt; Datei {filesCount}...</value>
  </data>
  <data name="MessageSimulating" xml:space="preserve">
    <value>Simuliere Ordner {foldersCount} &gt; Datei {filesCount}...</value>
  </data>
  <data name="MessageSortingFolders" xml:space="preserve">
    <value>Sortiere Ordner...</value>
  </data>
  <data name="MessageStillProcess" xml:space="preserve">
    <value>Das Programm arbeitet noch!

Bitte warten bis das Programm zu Ende gearbeitet hat, andererseits kann die Datenstruktur beschädigt werden!

Willst Du wirklich schließen?</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Optionen</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Pfad:</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Verarbeite...</value>
  </data>
  <data name="MessageFinalWithErrors" xml:space="preserve">
    <value>Erfolgreich abgeschlossen, jedoch gab es Fehler.

Genieße deine ordentlich sortierte Musik. ;)"</value>
  </data>
  <data name="ProcessingFinished" xml:space="preserve">
    <value>Verarbeitung abgeschlossen.</value>
  </data>
  <data name="RandomOrder" xml:space="preserve">
    <value>Zufällige Reihenfolge</value>
  </data>
  <data name="ReadingFolder" xml:space="preserve">
    <value>Lese Ordner... Bitte warten.</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Auswählen</value>
  </data>
  <data name="Simulate" xml:space="preserve">
    <value>Simulieren</value>
  </data>
  <data name="SortFolders" xml:space="preserve">
    <value>Ordner sortieren</value>
  </data>
  <data name="Sorting" xml:space="preserve">
    <value>Sortierung</value>
  </data>
  <data name="StartProcessing" xml:space="preserve">
    <value>STARTE VERABEITUNG</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Subfolder" xml:space="preserve">
    <value>Unterordner</value>
  </data>
  <data name="Testing" xml:space="preserve">
    <value>Testen</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Musik Sortierer</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>ACHTUNG!</value>
  </data>
</root>